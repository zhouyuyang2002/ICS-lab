#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Written by Yuyang Zhou
# Mail: 2000013061@stu.pku.edu.cn
#
# Improvement
# 1. Use 8*1 unrolling
# 2. Use iaddq instead of irmovq+addq
# 3. Reorder mrmovq and rmmovq in 8*1 unrolling, and reduce the Load/Use exception
# 4. A better approch of the rest 7 rounds of loops.(See detail in code below)
# 5. Reorder mrmovq and rmmovq in the rest 7 rounds of loops.(See details in the code below)
#
# AVE CPE : 7.50
# CPE when n=64 : 6.42
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:
##################################################################
# You can modify this portion
	# Loop header
	iaddq $-8,%rdx		
	jl E_Loop_2		
	
# This is an 8*1 unrolling
# Use 5.5 * 8 + 4 round in each loop
Loop_2:
	mrmovq (%rdi), %r8      # move src[0] to dst[0]
	mrmovq 8(%rdi), %r9     # move src[1] to dst[1]
	rmmovq %r8, (%rsi)
	rmmovq %r9, 8(%rsi)
	andq %r8, %r8           # if src[0] > 0 ++count
	jle Npos_2_1
	iaddq $1, %rax          
Npos_2_1:
	andq %r9, %r9           # if src[1] > 0 ++count
	jle Npos_2_2
	iaddq $1, %rax
Npos_2_2:
	mrmovq 16(%rdi), %r8    # move src[2] to dst[2]
	mrmovq 24(%rdi), %r9    # move src[3] to dst[3]
	rmmovq %r8, 16(%rsi)
	rmmovq %r9, 24(%rsi)
	andq %r8, %r8           # if src[2] > 0 ++count
	jle Npos_2_3
	iaddq $1, %rax 
Npos_2_3:
	andq %r9, %r9           # if src[3] > 0 ++count
	jle Npos_2_4
	iaddq $1, %rax 
Npos_2_4:
	mrmovq 32(%rdi), %r8    # move src[4] to dst[4]
	mrmovq 40(%rdi), %r9    # move src[5] to dst[5]
	rmmovq %r8, 32(%rsi)
	rmmovq %r9, 40(%rsi)
	andq %r8, %r8           # if src[4] > 0 ++count
	jle Npos_2_5
	iaddq $1, %rax 
Npos_2_5:
	andq %r9, %r9           # if src[5] > 0 ++count
	jle Npos_2_6
	iaddq $1, %rax 
Npos_2_6:
	mrmovq 48(%rdi), %r8    # move src[6] to dst[6]
	mrmovq 56(%rdi), %r9    # move src[7] to dst[7]
	rmmovq %r8, 48(%rsi)
	rmmovq %r9, 56(%rsi)
	andq %r8, %r8           # if src[6] > 0 ++count
	jle Npos_2_7
	iaddq $1, %rax 
Npos_2_7:
	andq %r9, %r9           # if src[7] > 0 ++count
	jle Npos_2_8
	iaddq $1, %rax 
Npos_2_8:
	iaddq $64, %rdi         # src += 8
	iaddq $64, %rsi         # dst += 8
	iaddq $-8, %rdx         # len -= 8
	jge Loop_2              # if len < 0 break


# E_Loop_2: %rdx in [-8,-1], save the value of len - 8 
E_Loop_2:

	iaddq $4, %rdx
	jl LEN_L4
        
	# %rdx in [0,3], save the value of len - 4
	# the following part just simply copy src[0~3] to dst[0~3]
	mrmovq (%rdi), %r8      # move src[0] to dst[0]
	mrmovq 8(%rdi), %r9     # move src[1] to dst[1]
	rmmovq %r8, (%rsi)
	rmmovq %r9, 8(%rsi)
	andq %r8, %r8           # if src[0] > 0 ++count
	jle Npos_1_1
	iaddq $1, %rax          
Npos_1_1:
	andq %r9, %r9           # if src[1] > 0 ++count
	jle Npos_1_2
	iaddq $1, %rax
Npos_1_2:
	mrmovq 16(%rdi), %r8    # move src[2] to dst[2]
	mrmovq 24(%rdi), %r9    # move src[3] to dst[3]
	rmmovq %r8, 16(%rsi)
	rmmovq %r9, 24(%rsi)
	andq %r8, %r8           # if src[2] > 0 ++count
	jle Npos_1_3
	iaddq $1, %rax 
Npos_1_3:
	andq %r9, %r9           # if src[3] > 0 ++count
	jle Npos_1_4
	iaddq $1, %rax 
Npos_1_4:
	iaddq $-1, %rdx
	jg LEN_G5
	# %rdx in {-1,0}, save the value of len - 5
	mrmovq 32(%rdi), %r8
	je LEN_5 # len = 5
	jmp Done # len = 4
LEN_G5:
	# %rdx in {1,2}, save the value of len - 5
	mrmovq 32(%rdi), %r8
	mrmovq 40(%rdi), %r9
	iaddq $-1, %rdx
	je LEN_6                 # len = 6
                                 # len = 7, fall through
LEN_7:
	mrmovq 48(%rdi), %r10    # mov src[6] to dst[6]
	rmmovq %r10, 48(%rsi)
	andq %r10, %r10
	jle LEN_6
	iaddq $1, %rax
LEN_6:
	rmmovq %r9, 40(%rsi)     # mov src[5] to dst[5]
	andq %r9, %r9
	jle LEN_5
	iaddq $1, %rax
LEN_5:
	rmmovq %r8, 32(%rsi)     # mov src[4] to dst[4]
	andq %r8, %r8
	jle Done
	iaddq $1, %rax
	jmp Done


LEN_L4:
	iaddq $3, %rdx
	jg LEN_G1
	# %rdx in {-1,0}, save the value of len - 1
	mrmovq (%rdi), %r8
	je LEN_1                # len = 1
	jmp Done                # len = 0
LEN_G1:
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9
	# %rdx in {1,2}, save the value of len - 1
	iaddq $-1, %rdx        
	je LEN_2                # len = 2, fall through
                                # len = 3
LEN_3:
	mrmovq 16(%rdi), %r10   # mov src[3] to dst[3]
	rmmovq %r10, 16(%rsi)
	andq %r10, %r10
	jle LEN_2
	iaddq $1, %rax
LEN_2:
	rmmovq %r9, 8(%rsi)     # mov src[2] to dst[2]
	andq %r9, %r9
	jle LEN_1
	iaddq $1, %rax
LEN_1:
	rmmovq %r8, (%rsi)      # mov src[1] to dst[1]
	andq %r8, %r8
	jle Done
	iaddq $1, %rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
